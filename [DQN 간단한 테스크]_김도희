import torch

class Lever:
    def __init__(self):
        self.state = torch.tensor([0.0, 0.0, 0.0])
        self.action_space = [0, 1, 2]
        self.num_actions = len(self.action_space)
        self.traces = []

    def step(self, action_idx:int):
        action = self.action_space[action_idx]
        if action == 0:
            self.state[0] += 1.0
            reward = 10
            done = True
        elif action == 1:
            self.state[1] += 1.0
            reward = 0
            done = False
        else:
            self.state[2] += 1.0
            reward = -5
            done = True

        self.traces.append(self.state.clone())

        return reward, done

    def reset(self):
        self.state = torch.tensor([0.0, 0.0, 0.0])
        self.traces = []
        return self.state

    def render(self):
        print(self.traces)


import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
import random

class DeepQNetwork(nn.Module):
    def __init__(self, state_size, action_size):
        super().__init__()
        self.fc1 = nn.Linear(state_size, 64)
        self.fc2 = nn.Linear(64, 64)
        self.fc3 = nn.Linear(64, action_size)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.model = DeepQNetwork(state_size, action_size)
        self.target_model = DeepQNetwork(state_size, action_size)
        self.target_model.load_state_dict(self.model.state_dict())
        self.optimizer = torch.optim.Adam(self.model.parameters(), lr=0.001)
        self.loss_fn = nn.MSELoss()
        self.memory = []
        self.batch_size = 64
        self.gamma = 0.99
        self.epsilon = 1.0
        self.epsilon_decay = 0.995
        self.epsilon_min = 0.01

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size)
        else:
            state = torch.tensor(state, dtype=torch.float32).unsqueeze(0)
            q_values = self.model(state)
            return torch.argmax(q_values).item()

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def replay(self):
        if len(self.memory) < self.batch_size:
            return

        batch = random.sample(self.memory, self.batch_size)
        states, targets = [], []
        for state, action, reward, next_state, done in batch:
            target = reward
            if not done:
                next_state = torch.tensor(next_state, dtype=torch.float32).unsqueeze(0).clone().detach()
                target = reward + self.gamma * torch.max(self.target_model(next_state).detach())

            state = torch.tensor(state, dtype=torch.float32).unsqueeze(0)  # 상태를 텐서로 변환하고 unsqueeze하여 차원을 추가
            target_f = self.model(state.clone().detach()).squeeze(0)  # 상태에 대한 타겟 Q값 계산
            target_f[action] = target
            states.append(state)
            targets.append(target_f)

        states = torch.cat(states, dim=0)  # 상태 리스트를 텐서로 변환하기 위해 torch.cat을 사용하여 여러 텐서를 연결
        targets = torch.stack(targets)

        self.optimizer.zero_grad()
        predictions = self.model(states)
        loss = self.loss_fn(predictions, targets)
        loss.backward()
        self.optimizer.step()

        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay


    def update_target_model(self):
        self.target_model.load_state_dict(self.model.state_dict())

# Lever 환경과 DQN 에이전트를 상호작용하며 훈련하는 코드
lever = Lever()
agent = DQNAgent(state_size=3, action_size=3)

tol_reward = []
for episode in range(1000):
    state = lever.reset()
    done = False
    total_reward = 0

    while not done:
        action = agent.act(state)
        reward, done = lever.step(action)
        next_state = lever.state
        agent.remember(state, action, reward, next_state, done)
        state = next_state
        total_reward += reward

    agent.replay()
    agent.update_target_model()
    tol_reward.append(total_reward)
    if episode % 100 == 0:
        print(np.mean(tol_reward[episode-100:episode]))
    # print(f"Episode: {episode + 1}, Total Reward: {total_reward}")
